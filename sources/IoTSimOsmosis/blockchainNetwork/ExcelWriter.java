package IoTSimOsmosis.blockchainNetwork;

import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelWriter {
	static XSSFWorkbook workbook = new XSSFWorkbook();
	public static int runNumber = 0;
	public static String fileName;

	public static void printToExcel() {

		config();
		result();
		blockchainLedger();
		globalBlockchain();
		blockchainTranscations();
		transcationLatency();
		transcationPool();
		// nodeLog();

		// Generate filename
		String fname = "Blockchain-" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyy-HH:mm:ss"))
				+ "-" /* + (simulationRunNumber + 1) */ + ".xlsx";

		try (FileOutputStream outputStream = new FileOutputStream("output/Blockchain-.xlsx")) {
			workbook.write(outputStream);
			outputStream.close();
			outputStream.flush();

			Desktop.getDesktop().open(new File("output/Blockchain-.xlsx"));

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	/************************ to print simulator configuration *********************************/

	public static void config() {
		ArrayList<Object[]> df1 = new ArrayList<>();

		df1.add(new Object[] { "No. of Node","No. of Miner", "consensus Algorithm", "No. of Transactions", "Transaction Gas Limit",
				"Max Tx Size", "Min Tx Size","Tx Gas Limit", "Max Block Size", "Block Gas Limit",
				"Block Interval", "Simulation Time","Simulator No. Run" });

		df1.add(new Object[] { Node.getNodes().size(),InputConfig.getNumberOfMiner(), 
				InputConfig.getConsensusalgorithm(),
				InputConfig.getTransactionNumber(), 
				InputConfig.getTransactionGaslimit(),
				InputConfig.getMaxTransactionSize(), 
				InputConfig.getMinTransactionSize(),
				InputConfig.getTransactionGaslimit(),
				InputConfig.getMaxblocksize(),
				InputConfig.getBlockGasLimit(), 
				InputConfig.getBlockInterval(),
				InputConfig.getSimulationTime(),
				InputConfig.getSimulatorRun() });

		// writing data frames to workbook
		writeData(df1, workbook, "config");

	}

	/************************ to print simulator result *********************************/

	public static void result() {
		ArrayList<Object[]> df2 = new ArrayList<>();

		df2.add(new Object[] { "Simulator No. Run", 
				"Total No. of Blocks", 
				"Total No. of Blocks include Tx",
				"Total No. of  Blocks without Tx",
				"Avg. Block Size (MB)",
				"No. Blocks Generated by Miner [1]",
				"Avg. Time Block Generated by Miner [1]",
				"No. Blocks Generated by Miner [2]",
				"Avg. Time Block Generated by Miner [2]",
				"Total No of Transactions",
				"Avg. No. of Tx per block",
				"Avg. of Tx Inclusion Time (secs)",
				"Avg. Tx Used Gas",
				"Avg. Tx Size (MB)",
				"Total No. of Pending Tx",
				"Avg. Block Propagation (secs)", 
				"Avg. Transaction Latency (secs)",
				"Transactions execution (secs)",
				"Transaction Throughput (Tx/secs)",
				 });

		df2.add(new Object[] { Statistics.getRunNumber(),
				Statistics.totalNumberOfBlock,
				Statistics.blockIncludeTx,
				Statistics.blockWithoutTx,
				Statistics.blockSize,
				Statistics.blockMinedby1,
				Statistics.blockMinedTime1,
				Statistics.blockMinedby2,
				Statistics.blockMinedTime2,
				Statistics.totalNumberOfTx,
				Statistics.TxPerBlock,
				Statistics.TxInclusionTime,
				Statistics.TxUsedGas,
				Statistics.TxSize,
				Statistics.pendingTx,
				Statistics.blockPropagationTime, 
				Statistics.averageLatency,
				Statistics.totalTransactionsTime,
				Statistics.transactionsThroughput, 
				 });

		// writing data frames to workbook
		writeData(df2, workbook, "Results");

	}

	/************************ to print blockchain blocks *********************************/

	public static void blockchainLedger() {

		ArrayList<Object[]> df3 = new ArrayList<>();

		df3.add(new Object[] { "Simulator No. Run", "Block ID", "Previous Block ID", "Block Depth", "Block Timestamp",
				"Block Size", "No. of Transactions", "Mined by", "hash power" });

		for (Object[] chain : Statistics.getChains()) {
			df3.add(chain);
		}

		writeData(df3, workbook, "block");

	}

	/************************ to print global blockchain *********************************/

	public static void globalBlockchain() {

		ArrayList<Object[]> df4 = new ArrayList<>();

		df4.add(new Object[] { "Simulator No. Run", "Block ID", "Previous Block ID", "Block Depth", "Block Timestamp",
				"Block Received Time", "Block Size", "No. of Transactions" });

		for (Object[] globalBlockchain : Statistics.getGlobalBlockchain()) {
			df4.add(globalBlockchain);
		}

		writeData(df4, workbook, "globalBlockchain");

	}

	/************************ to print transcations *********************************/

	public static void blockchainTranscations() {

		ArrayList<Object[]> df5 = new ArrayList<>();
		df5.add(new Object[] { "Simulator No. Run", "Transaction ID", "Creation time ", "Confirmation time",
				"Transaction size", "Transaction Used Gas", "Block ID"});
		for (Object[] transaction : Statistics.getTransactions()) {
			df5.add(transaction);
		}

		writeData(df5, workbook, "Transcations");

	}

	/************************ to print transcations latency *********************************/

	public static void transcationLatency() {

		ArrayList<Object[]> df6 = new ArrayList<>();
		df6.add(new Object[] { "Simulator No. Run", "Transaction ID", "Creation time ", "Confirmation time",
				"Transaction Latency" });

		for (Object[] transactionLatency : Statistics.getTransactionLatencies()) {
			df6.add(transactionLatency);
		}

		writeData(df6, workbook, "TransactionLatency");

	}

	/************************ to print transcations pool *********************************/

	public static void transcationPool() {
		ArrayList<Object[]> df7 = new ArrayList<>();

		df7.add(new Object[] { "Simulator No. Run", "Transaction ID", "Creation time ", "Tx Used Gas ",
				"used Gas","Status" });
		for (Object[] transactionLatency : Statistics.getTransactionsPool()) {
			df7.add(transactionLatency);
		}

		writeData(df7, workbook, "TransactionPool");

	}

	/************************ to print nodes log for raft *********************************/

	public static void nodeLog() {
		ArrayList<Object[]> df8 = new ArrayList<>();

		df8.add(new Object[] { "Stage", "Node ID", "Node Type", "Joining Time" });

		for (Object[] NodesLog : Consensus.getNodesLog()) {
			df8.add(NodesLog);
		}

		writeData(df8, workbook, "NodesLog");

	}

	/**
	 * Writes each Array within Data frame as a Row in the excel sheet.
	 * 
	 * @param DataFrame
	 * @param workbook
	 * @param sheetName
	 */
	private static void writeData(ArrayList<Object[]> DataFrame, XSSFWorkbook workbook, String sheetName) {

		XSSFSheet sheet = workbook.createSheet(sheetName);

		int rowCount = 0;

		for (Object[] rowData : DataFrame) {
			XSSFRow row = sheet.createRow(++rowCount);

			int columnCount = 0;
			for (Object field : rowData) {
				XSSFCell cell = row.createCell(++columnCount);
				if (field instanceof String) {
					cell.setCellValue((String) field);
				} else if (field instanceof Integer) {
					cell.setCellValue((Integer) field);
				} else if (field instanceof Double) {
					cell.setCellValue((Double) field);
				} else if (field instanceof Long) {
					cell.setCellValue((Long) field);
				}
			}
		}

		// Basic aesthetic formating of Excel Sheet
		formatExcelSheet(DataFrame.get(0).length, sheet, workbook);

	}

	/**
	 * Aesthetic formating of excel sheet
	 * 
	 * @param columns
	 * @param sheet
	 * @param workbook
	 */
	private static void formatExcelSheet(int columns, XSSFSheet sheet, XSSFWorkbook workbook) {

		// Creating header font.
		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 11);
		font.setBold(true);
		font.setColor(IndexedColors.WHITE.getIndex());

		// Setting header font and header filling.
		XSSFCellStyle style = workbook.createCellStyle();
		style.setFont(font);
		style.setFillBackgroundColor(IndexedColors.BLACK.getIndex());
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);

		XSSFRow header = sheet.getRow((short) 1);
		// Setting style for each cell in the header row.
		for (int i = 1; i < header.getLastCellNum(); i++) {
			header.getCell(i).setCellStyle(style);
		}

		// Resize column widths
		for (int i = 1; i < columns + 1; i++) {
			sheet.autoSizeColumn(i);
		}
	}

}
